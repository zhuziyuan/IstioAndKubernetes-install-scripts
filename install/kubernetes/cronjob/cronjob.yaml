# Cron Job 管理基于时间的 Job，即：
#
#   在给定时间点只运行一次
#   周期性地在给定时间点运行
#
#CronJob Spec
#
#        .spec.schedule：调度，必需字段，指定任务运行周期，格式同 Cron
#        
#        .spec.jobTemplate：Job 模板，必需字段，指定需要运行的任务，格式同 Job
#        
#        .spec.startingDeadlineSeconds ：启动 Job 的期限（秒级别），该字段是可选的。
#                 如果因为任何原因而错过了被调度的时间，那么错过执行时间的 Job 将被认为是失败的。如果没有指定，则没有期限
#                 
#        .spec.concurrencyPolicy：并发策略，该字段也是可选的。它指定了如何处理被 Cron Job 创建的 Job 的并发执行。
#                 只允许指定下面策略中的一种：
#
#        Allow（默认）：允许并发运行 Job
#        
#        Forbid：禁止并发运行，如果前一个还没有完成，则直接跳过下一个
#        
#        Replace：取消当前正在运行的 Job，用一个新的来替换
#        
#        注意，当前策略只能应用于同一个 Cron Job 创建的 Job。如果存在多个 Cron Job，它们创建的 Job 之间总是允许并发运行。
#
#        .spec.suspend ：挂起，该字段也是可选的。如果设置为 true，后续所有执行都会被挂起。
#                 它对已经开始执行的 Job 不起作用。默认值为 false。
#
#        .spec.successfulJobsHistoryLimit 和 .spec.failedJobsHistoryLimit ：历史限制，是可选的字段。
#                 它们指定了可以保留多少完成和失败的 Job。
#
#        默认情况下，它们分别设置为 3 和 1。设置限制的值为 0，相关类型的 Job 完成后将不会被保留。

---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: hello
spec:
  schedule: "*/1 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: hello
            image: busybox
            args:
            - /bin/sh
            - -c
            - date; echo Hello from the Kubernetes cluster
          restartPolicy: OnFailure
