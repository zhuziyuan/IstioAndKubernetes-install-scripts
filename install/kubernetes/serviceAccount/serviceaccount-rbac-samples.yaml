# -------------------- ServiceAccount ---------------
# 创建用户jane
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    name: jane
  name: jane
  namespace: default

# 创建用户 dave
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    name: dave
  name: dave
  namespace: kube-system

# --------------------- Role -------------------------
# https://jimmysong.io/kubernetes-handbook/concepts/rbac.html
# 
# 在RBAC API中，一个角色包含了一套表示一组权限的规则。 
# 权限以纯粹的累加形式累积（没有”否定”的规则）。
# 角色可以由命名空间（namespace）内的Role对象定义，
# 而整个Kubernetes集群范围内有效的角色则通过ClusterRole对象实现。
#
# 一个Role对象只能用于授予对某一单一命名空间中资源的访问权限。
# 以下示例描述了”default”命名空间中的一个Role对象的定义，用于授予对pod的读访问权限
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""] # 空字符串""表明使用core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]

# -------------------- ClusterRole -----------------------
# ClusterRole对象可以授予与Role对象相同的权限，但由于它们属于集群范围对象， 也可以使用它们授予对以下几种资源的访问权限：
#
#   集群范围资源（例如节点，即node）
#   非资源类型endpoint（例如”/healthz”）
#   跨所有命名空间的命名空间范围资源（例如pod，需要运行命令kubectl get pods --all-namespaces来查询集群中所有的pod）
#
#下面示例中的ClusterRole定义可用于授予用户对某一特定命名空间，或者所有命名空间中的secret（取决于其绑定方式）的读访问权限
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata: # 鉴于ClusterRole是集群范围对象，所以这里不需要定义"namespace"字段
  name: secret-reader
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "watch", "list"]

# ------------------- RoleBinding --------------------------
# 角色绑定将一个角色中定义的各种权限授予一个或者一组用户。 
# 角色绑定包含了一组相关主体（即subject, 包括用户——User、用户组——Group、或者服务账户——Service Account）以及对被授予角色的引用。 
# 在命名空间中可以通过RoleBinding对象授予权限，而集群范围的权限授予则通过ClusterRoleBinding对象完成。
#
# RoleBinding可以引用在同一命名空间内定义的Role对象。 
# 下面示例中定义的RoleBinding对象在”default”命名空间中将”pod-reader”角色授予用户”jane”。
# 这一授权将允许用户”jane”从”default”命名空间中读取pod
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: default
subjects: #主体
- kind: ServiceAccount
  name: jane
  namespace: default
roleRef: #引用的角色
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io

# RoleBinding对象也可以引用一个ClusterRole对象用于在RoleBinding所在的命名空间内授予用户对所引用的 ClusterRole 中 定义的命名空间资源的访问权限。
# 这一点允许管理员在整个集群范围内首先定义一组通用的角色，然后再在不同的命名空间中复用这些角色。
#
# 例如，尽管下面示例中的RoleBinding引用的是一个ClusterRole对象，
# 但是用户”dave”（即角色绑定主体）还是只能读取 "kube-system" 命名空间中的secret（即RoleBinding所在的命名空间）。
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: read-secrets
  namespace: kube-system  #这里表明仅授权读取"kube-system"命名空间中的资源。
subjects:
- kind: ServiceAccount
  name: dave
  namespace: kube-system
  #apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io

# ------------------------ ClusterRoleBinding ----------------------
# 可以使用ClusterRoleBinding在集群级别和所有命名空间中授予权限。
# 下面示例中所定义的ClusterRoleBinding 允许在用户组 "manager" 中的任何用户都可以读取集群中任何命名空间中的secret。
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: read-secrets-global
subjects:
- kind: Group
  name: manager
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: secret-reader
  apiGroup: rbac.authorization.k8s.io

